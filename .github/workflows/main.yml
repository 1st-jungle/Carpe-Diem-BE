name: CI/CD Docker
on:
  push:
    branches:
    - develop
    - master

env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/backend
  VERSION: ${{ github.sha }}
  NAME: CICD

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0
      - name: Docker Setup Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.4.1
      - name: Cache
        uses: actions/cache@v3.2.5
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      # GitHub 컨테이너 레지스트리에 로그인 후 빌드 & 푸시
      - name: Docker Login
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v4.0.0
        id: docker_build
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest
          
  # 배포 Job
  deploy:
    needs: build  # build 후에 실행되도록 정의
    name: Deploy
    runs-on: [ self-hosted, CICD.yml ] # AWS ./configure에서 사용할 label명
    steps:
      - name: Docker Login
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      # 3000 -> 80 포트로 수행하도록 지정
      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          docker run -d -p 4000:4000 --name backend --restart always ${{ env.DOCKER_IMAGE }}:latest
    
